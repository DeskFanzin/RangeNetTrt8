cmake_minimum_required(VERSION 3.5 FATAL_ERROR)
project(rangenet_lib)

# handle debug vs release mode
#if (NOT CMAKE_BUILD_TYPE)
#  set(CMAKE_BUILD_TYPE Release)
#endif ()

set(CMAKE_CXX_STANDARD 14)
#set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++14 -O3")
#set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -D_MWAITXINTRIN_H_INCLUDED")
#set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -D_FORCE_INLINES")
#set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -D__STRICT_ANSI__")

find_package(PCL REQUIRED QUIET COMPONENTS io)
include_directories(${PCL_INCLUDE_DIRS})

## Find catkin macros and libraries
find_package(catkin REQUIRED)

# libyaml-cpp (required)
find_package(yaml-cpp)
if (yaml-cpp_FOUND)
  message("YAML Libs: ${YAML_CPP_LIBRARIES}")
  message("YAML Headers: ${YAML_CPP_INCLUDE_DIR}")
else ()
  message(FATAL_ERROR "yaml-cpp NOT FOUND\n")
endif (yaml-cpp_FOUND)

# get boost (required)
find_package(Boost COMPONENTS program_options filesystem)
if (Boost_FOUND)
  message("Boost Libs: ${Boost_LIBRARIES}")
  message("Boost Headers: ${Boost_INCLUDE_DIRS}\n")
else ()
  message(FATAL_ERROR "Boost NOT FOUND\n")
endif ()

# cuda
find_package(CUDA)
#find_library(CUBLAS_LIBRARIES cublas HINTS
#  ${CUDA_TOOLKIT_ROOT_DIR}/lib64
#  ${CUDA_TOOLKIT_ROOT_DIR}/lib
#  )
include_directories(${CUDA_INCLUDE_DIRS})
message("CUDA Libs: ${CUDA_LIBRARIES}")
message("CUDA Headers: ${CUDA_INCLUDE_DIRS}")

# TensorRT
find_library(NVINFER NAMES nvinfer)
find_library(NVPARSERS NAMES nvparsers)
find_library(NVINFER_PLUGIN NAMES nvinfer_plugin)
find_library(NVONNX_PARSER NAMES nvonnxparser)
set(TENSORRT_LIBRARIES ${NVINFER} ${NVPARSERS} ${NVINFER_PLUGIN} ${NVONNX_PARSER})
set(TENSORRT_FOUND ON)
message("TensorRT is available!")

# CUDNN
# try to find the CUDNN module
find_library(CUDNN_LIBRARY
  NAMES libcudnn.so${__cudnn_ver_suffix} libcudnn${__cudnn_ver_suffix}.dylib ${__cudnn_lib_win_name}
  PATHS $ENV{LD_LIBRARY_PATH} ${__libpath_cudart} ${CUDNN_ROOT_DIR} ${PC_CUDNN_LIBRARY_DIRS} ${CMAKE_INSTALL_PREFIX}
  PATH_SUFFIXES lib lib64 bin
  DOC "CUDNN library.")
message("CUDNN_LIBRARY: ${CUDNN_LIBRARY}")

###################################
## catkin specific configuration ##
###################################
catkin_package(
  INCLUDE_DIRS
  include
  LIBRARIES
  rangenet_external
  rangenet_lib
  CATKIN_DEPENDS
  DEPENDS
  YAML_CPP
  CFG_EXTRAS
)


###########################
## Install header config ##
###########################
include_directories(
  example
  include
  ${rangenet_external_INCLUDE_DIRS}
  ${catkin_INCLUDE_DIRS}
  ${YAML_CPP_INCLUDE_DIR}
)

# turn config file into flags (sets TENSORRT_FOUND and TORCH_FOUND)
#configure_file(include/external.hpp.in ${PROJECT_SOURCE_DIR}/include/external.hpp @ONLY)


# make wrapper lib
add_library(rangenet_external src/external.cpp)

## Declare a cpp library
# define the network library (compiling tf and trt conditionally)
set(rangenet_lib_SOURCES src/net.cpp src/selector.cpp src/netTensorRT.cpp)

# make the library and link stuff to it
cuda_add_library(rangenet_lib ${rangenet_lib_SOURCES})

target_link_libraries(rangenet_lib
  rangenet_external
  ${catkin_LIBRARIES}
  ${YAML_CPP_LIBRARIES}
  )

find_package(OpenCV COMPONENTS core viz)
message("Building example...")
message("OpenCV Libs: ${OpenCV_LIBS}")
set(OpenCV_LIBRARIES ${OpenCV_LIBS})
message("OpenCV Headers: ${OpenCV_INCLUDE_DIRS}")
include_directories(${OpenCV_INCLUDE_DIRS})

add_executable(infer example/infer.cpp)

target_link_libraries(infer
  rangenet_lib
  ${TENSORRT_LIBRARIES}
  ${CUDA_LIBRARIES}
  ${CUBLAS_LIBRARIES}
  ${CUDA_curand_LIBRARY}
  ${CUDNN_LIBRARY}
  ${catkin_LIBRARIES}
  ${OpenCV_LIBRARIES}
  ${Boost_LIBRARIES}
  ${YAML_CPP_LIBRARIES}
  )


add_library(infer_api example/infer_api.cpp)
target_link_libraries(infer_api ${PCL_LIBRARIES} rangenet_lib
  ${TENSORRT_LIBRARIES}
  ${CUDA_LIBRARIES}
  ${CUBLAS_LIBRARIES}
  ${CUDA_curand_LIBRARY}
  ${CUDNN_LIBRARY}
  ${catkin_LIBRARIES}
  ${OpenCV_LIBRARIES}
  ${Boost_LIBRARIES}
  ${YAML_CPP_LIBRARIES})




